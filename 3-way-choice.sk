include "muxes.sk";
include "arith_ops.sk";
include "rel_ops.sk";

generator bit predicate(int state_1, int state_2, int pkt_1, int pkt_2) {
  return rel_op(abc_arith(mux2(state_1, state_2), pkt_1, pkt_2), ??);
}

generator int arithmetic(int a, int b, int c, int d) {
  return abc_arith(a, b, c) + mux2(??, d);
}

StateResult atom_template(int state_1, int state_2, int pkt_1, int pkt_2, int pkt_3, int pkt_4, int pkt_5) {
  if (predicate(state_1, state_2, pkt_1, pkt_2)) {
   if (predicate(state_1, state_2, pkt_1, pkt_2)) {
    state_1 = arithmetic(state_1, pkt_1, pkt_2, pkt_3);
   } else {
    state_1 = arithmetic(state_1, pkt_1, pkt_2, pkt_3);
   }
   if (predicate(state_1, state_2, pkt_1, pkt_2)){
    state_2 = arithmetic(state_2, pkt_1, pkt_2, pkt_3);
   } else {
    state_2 = arithmetic(state_2, pkt_1, pkt_2, pkt_3);
   }
  } else if (predicate(state_1, state_2, pkt_1, pkt_2)) {
   if (predicate(state_1, state_2, pkt_1, pkt_2)) {
    state_1 = arithmetic(state_1, pkt_1, pkt_2, pkt_3);
   } else {
    state_1 = arithmetic(state_1, pkt_1, pkt_2, pkt_3);
   }
   if (predicate(state_1, state_2, pkt_1, pkt_2)){
    state_2 = arithmetic(state_2, pkt_1, pkt_2, pkt_3);
   } else {
    state_2 = arithmetic(state_2, pkt_1, pkt_2, pkt_3);
   }
  } else {
   if (predicate(state_1, state_2, pkt_1, pkt_2)) {
    state_1 = arithmetic(state_1, pkt_1, pkt_2, pkt_3);
   } else {
    state_1 = arithmetic(state_1, pkt_1, pkt_2, pkt_3);
   }
   if (predicate(state_1, state_2, pkt_1, pkt_2)) {
    state_2 = arithmetic(state_2, pkt_1, pkt_2, pkt_3);
   } else {
    state_2 = arithmetic(state_2, pkt_1, pkt_2, pkt_3);
   }
  }

  StateResult ret = new StateResult();
  ret.result_state_1 = state_1;
  ret.result_state_2 = state_2;
  return ret;
}

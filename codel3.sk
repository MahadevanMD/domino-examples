struct StateResult {
  int result_state_1;
  int result_state_2;
}
include "rel_ops.sk";
include "muxes.sk";

StateResult atom_template(int state_1, int state_2, int pkt_1, int pkt_2, int pkt_3, int pkt_4, int pkt_5) {
  bit pred1 = rel_op(mux3(pkt_1, pkt_2, ??), mux3(state_1, state_2, ??));
  bit pred2 = rel_op(mux3(pkt_1, pkt_2, ??), mux3(state_1, state_2, ??));
  bit pred3 = rel_op(mux3(pkt_1, pkt_2, ??), mux3(state_1, state_2, ??));
  bit pred4 = rel_op(mux3(pkt_1, pkt_2, ??), mux3(state_1, state_2, ??));
  if (bool_op(bitmux2(pred1, ??(1)), bitmux2(pred2, ??(1)))) {
    state_1 = mux4(state_1, pkt_1, pkt_2, ??) + mux3(??, pkt_1, pkt_2);
    state_2 = mux4(state_2, pkt_1, pkt_2, ??) + mux3(??, pkt_1, pkt_2);
  } else if (bool_op(bitmux2(pred3, ??(1)), bitmux2(pred4, ??(1)))) {
    state_1 = mux4(state_1, pkt_1, pkt_2, ??) + mux3(??, pkt_1, pkt_2);
    state_2 = mux4(state_2, pkt_1, pkt_2, ??) + mux3(??, pkt_1, pkt_2);
  }

  StateResult ret = new StateResult();
  ret.result_state_1 = state_1;
  ret.result_state_2 = state_2;
  return ret;
}
StateResult codelet(int state_1, int state_2, int pkt_1, int pkt_2, int pkt_3, int pkt_4, int pkt_5){int pkt_count00;
int pkt_count01;
int pkt_count02;
int pkt_count03;
int pkt_drop_next00;
int pkt_drop_next01;
int pkt_tmp18;
int pkt_tmp21;
int pkt_tmp22;
int pkt_tmp23;
int pkt_tmp24;
int pkt_tmp29;
int pkt_tmp31;
int pkt_tmp32;
int pkt_tmp33;
int pkt_tmp39;
int pkt_tmp41;
int pkt_tmp42;
int pkt_tmp47;
int pkt_tmp48;
int pkt_tmp50;
int pkt_tmp53;
int pkt_tmp54;
int pkt_tmp57;
int pkt_tmp65;
int pkt_tmp67;
int pkt_tmp68;
int pkt_tmp70;
int pkt_tmp72;
pkt_count00=state_1;
pkt_drop_next00=state_2;
pkt_tmp47=pkt_2>=pkt_drop_next00;
pkt_tmp18=(pkt_tmp47!= 0)&&(pkt_1!= 0);
pkt_tmp50=((pkt_4!= 0)) ? pkt_tmp18 : 0;
pkt_tmp21=((pkt_4!= 0))&&(pkt_tmp50!= 0);
pkt_tmp22=pkt_count00+1;
pkt_count01=(pkt_tmp21 != 0) ? pkt_tmp22 : pkt_count00;
pkt_tmp23=((pkt_4!= 0))&&(pkt_tmp50!= 0);
pkt_tmp48=100/mysqrt(pkt_count01);
pkt_tmp24=pkt_drop_next00+pkt_tmp48;
pkt_drop_next01=(pkt_tmp23 != 0) ? pkt_tmp24 : pkt_drop_next00;
pkt_tmp53=pkt_count01>2;
pkt_tmp72=pkt_2-pkt_drop_next01;
pkt_tmp54=pkt_tmp72<pkt_9;
pkt_tmp29=(pkt_tmp53!= 0)&&(pkt_tmp54!= 0);
pkt_tmp70=(pkt_3 != 0) ? pkt_tmp29 : 0;
pkt_tmp31=(pkt_5!= 0)&&(pkt_tmp70!= 0);
pkt_tmp32=pkt_count01-2;
pkt_count02=(pkt_tmp31 != 0) ? pkt_tmp32 : pkt_count01;
pkt_tmp57=!(pkt_tmp70!= 0);
pkt_tmp33=(pkt_6!= 0)&&(pkt_tmp57!= 0);
pkt_count03=(pkt_tmp33 != 0) ? (1) : pkt_count02;
pkt_tmp65=!(pkt_tmp70!= 0);
pkt_tmp39=(pkt_7!= 0)&&(pkt_tmp65!= 0);
state_1=(pkt_tmp39 != 0) ? (1) : pkt_count02;
pkt_tmp67=!(pkt_tmp70!= 0);
pkt_tmp41=(pkt_8!= 0)&&(pkt_tmp67!= 0);
pkt_tmp68=100/mysqrt(pkt_count03);
pkt_tmp42=pkt_2+pkt_tmp68;
state_2=(pkt_tmp41 != 0) ? pkt_tmp42 : pkt_drop_next01;
  StateResult ret = new StateResult();
  ret.result_state_1 = state_1;
  ret.result_state_2 = state_2;
  return ret;
}
harness void main(int state_1, int state_2, int pkt_1, int pkt_2, int pkt_3, int pkt_4, int pkt_5) {
  StateResult spec_result = codelet(state_1, state_2, pkt_1, pkt_2, pkt_3, pkt_4, pkt_5);

  StateResult impl_result = atom_template(state_1, state_2, pkt_1, pkt_2, pkt_3, pkt_4, pkt_5);

  // Assert values
  assert(spec_result.result_state_1 == impl_result.result_state_1);
  assert(spec_result.result_state_2 == impl_result.result_state_2);
}
